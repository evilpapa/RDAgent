evaluator_code_feedback_v1_system: |-
  用户正在尝试在以下场景中实现一些因子：
  {{ scenario }}
  用户将提供因子的相关信息。

  你的任务是检查用户的代码是否与因子和场景一致。
  用户将提供源Python代码以及执行失败时的错误信息。
  用户可能会提供正确的代码供你进行批评。你不应以任何形式泄露正确代码给用户，但可以使用它来提供批评。

  用户还比较了用户代码计算的因子值与正确代码的因子值。用户将提供一些分析结果，比较两个输出。你可能会发现代码中导致两个输出差异的错误。

  如果提供了正确代码，你的批评应仅考虑检查用户代码是否与正确代码一致，因为正确代码是绝对正确的。
  如果未提供正确代码，你的批评应考虑检查用户代码是否合理且正确。

  注意你的批评不是为了让用户调试代码。它们是发送给编码代理以纠正代码的。所以不要给用户提供任何检查项，比如“请检查代码行XXX”。

  你的建议不应包含任何代码，只需一些清晰简短的建议。请在你的回复中指出非常关键的问题，忽略不重要的问题以避免混淆。如果代码中未发现重大问题，你可以回复“未发现批评”。

  你应该为每个批评提供建议以帮助用户改进代码。请按照以下格式回复批评。这是输出的示例结构：
  批评1：批评1的消息
  批评2：批评2的消息

evaluator_code_feedback_v1_user: |-
  --------------因子信息---------------
  {{ factor_information }}
  --------------Python代码---------------
  {{ code }}
  --------------执行反馈---------------
  {{ execution_feedback }}
  {% if value_feedback is not none %}
  --------------因子值反馈---------------
  {{ value_feedback }}
  {% endif %}
  {% if gt_code is not none %}
  --------------正确Python代码---------------
  {{ gt_code }}
  {% endif %}

evolving_strategy_factor_implementation_v1_system: |-
  用户正在尝试在以下场景中实现一些因子：
  {{ scenario }}
  你的代码预计要与场景对齐，这意味着用户需要通过你的代码获得期望的准确因子值。

  为了帮助你编写正确的代码，用户可能会提供多种信息来帮助你编写正确的代码：
  1. 用户可能会向你提供类似因子的正确代码。你应该从这些代码中学习以编写正确的代码。
  2. 用户可能会向你提供失败的前一个代码及其相应的反馈。反馈包括执行情况、代码和因子值。你应该分析反馈并尝试纠正最新的代码。
  3. 用户可能会向你提供对最新失败代码的建议以及一些类似错误的代码与正确代码对。你应该从这些建议中学习以编写正确的代码。
  
  你必须根据你之前的最新尝试编写代码，该尝试包括你之前的代码和代码反馈，你应该仔细阅读之前的尝试，并且不得修改之前代码的正确部分。

  注意你不应在json格式之前或之后添加任何其他文本。

  {% if queried_former_failed_knowledge|length != 0 %}
  --------------你之前的最新尝试---------------
  =====前一个实现的代码=====
  {{ queried_former_failed_knowledge[-1].implementation.all_codes }}
  =====前一个实现的反馈=====
  {{ queried_former_failed_knowledge[-1].feedback }}
  {% endif %}

  请按照以下json格式回复代码。这是JSON输出的示例结构：
  {
      "code": "Python代码作为字符串."
  }

evolving_strategy_factor_implementation_v2_user: |-
  --------------目标因子信息---------------
  {{ factor_information_str }}

  {% if queried_similar_error_knowledge|length != 0 %}
  {% if error_summary_critics is none %}
  回想一下你上次的失败，你的实现遇到了一些错误。
  在处理其他任务时，你遇到了类似的错误，但最终解决了它们。以下是一些示例：
  {% for error_content, similar_error_knowledge in queried_similar_error_knowledge %} 
  --------------与类似错误相关的因子信息 ({{error_content}})---------------
  {{ similar_error_knowledge[0].target_task.get_task_information() }}
  =====具有类似错误的代码 ({{error_content}})=====
  {{ similar_error_knowledge[0].implementation.all_codes }}
  =====与具有类似错误的前一个代码的成功代码 ({{error_content}})=====
  {{ similar_error_knowledge[1].implementation.all_codes }}
  {% endfor %}
  {% else %}
  回想一下你上次的失败，你的实现遇到了一些错误。
  在查看了一些类似错误及其解决方案后，以下是一些建议，供你纠正代码时参考：
  {{error_summary_critics}}
  {% endif %}
  {% endif %}
  {% if queried_similar_successful_knowledge|length != 0 %}
  以下是一些类似组件任务的成功实现，请将它们作为参考：
  --------------与类似因子相关的正确代码---------------
  {% for similar_successful_knowledge in queried_similar_successful_knowledge %}
  =====因子 {{loop.index}}:=====
  {{ similar_successful_knowledge.target_task.get_task_information() }}
  =====代码:=====
  {{ similar_successful_knowledge.implementation.all_codes }}
  {% endfor %}
  {% endif %}
  {% if latest_attempt_to_latest_successful_execution is not none %}
  你已尝试纠正之前失败的代码，但仍然遇到了一些错误。以下是最新尝试与最新成功执行的对比，请确保你的新代码不再出现相同的错误：
  =====你的最新尝试=====
  {{ latest_attempt_to_latest_successful_execution.implementation.all_codes }}
  =====对你最新尝试的反馈=====
  {{ latest_attempt_to_latest_successful_execution.feedback }}
  {% endif %}

evolving_strategy_error_summary_v2_system: |-
  用户正在尝试在以下场景中实现一些因子：
  {{ scenario }}
  用户正在执行以下任务： 
  {{factor_information_str}}

  你已经编写了一些代码，但遇到了如下错误：
  {{code_and_feedback}}

  用户发现了一些遇到类似错误的任务及其最终正确解决方案。
  请参考这些类似错误及其解决方案，提供一些清晰、简短且准确的批评，可能有助于你解决代码中的问题。

  你的建议不应包含任何代码，只需一些清晰简短的建议。请在你的回复中指出非常关键的问题，忽略不重要的问题以避免混淆。如果代码中未发现重大问题，你可以回复“未发现批评”。

  [注意]
  1. 处理数据时，避免时间泄漏。

  请按照以下格式回复批评。这是输出的示例结构：
  批评1：批评1的消息
  批评2：批评2的消息
  
evolving_strategy_error_summary_v2_user: |-
  {% if queried_similar_error_knowledge|length != 0 %}
  {% for error_content, similar_error_knowledge in queried_similar_error_knowledge %} 
  --------------与类似错误相关的因子信息 ({{error_content}})---------------
  {{ similar_error_knowledge[0].target_task.get_task_information() }}
  =====具有类似错误的代码 ({{error_content}})=====
  {{ similar_error_knowledge[0].implementation.all_codes }}
  =====与具有类似错误的前一个代码的成功代码 ({{error_content}})=====
  {{ similar_error_knowledge[1].implementation.all_codes }}
  {% endfor %}
  {% endif %}


select_implementable_factor_system: |-
  用户正在尝试在以下场景中实现一些因子：
  {{ scenario }}
  你的工作是帮助用户选择最容易实现的因子。一些因子可能由于信息不足或过于复杂而难以实现。用户将提供你应该选择的因子数量以及因子的相关信息，包括它们的描述、公式和变量解释。
  用户将向你提供因子的尝试实现及其反馈。你需要仔细审查你之前的尝试。一些因子已经反复尝试但未成功。你应考虑放弃这些因子。
  请分析每个因子的难点，并提供理由，回复所选可实施因子的索引的json格式。这是JSON输出的示例结构：
  {
      "Analysis": "分析每个因子的难点，并提供该因子是否可以实施的理由."
      "selected_factor": "所选因子在列表中的索引，如 [0, 2, 3]. 其长度应为筛选后因子的数量.",
  }

select_implementable_factor_user: |-
  你应该选择的因子数量： {{ factor_num }}
  {% for factor_info in sub_tasks %} 
  =============因子索引:{{factor_info[0]}}=============
  =====因子名称=====
  {{ factor_info[1].factor_name }}
  =====因子描述=====
  {{ factor_info[1].factor_description }}
  =====因子公式=====
  {{ factor_info[1].factor_formulation }}
  {% if factor_info[2]|length != 0 %}
  --------------你之前的尝试---------------
  {% for former_attempt in factor_info[2] %}
  =====尝试 {{ loop.index }} 的代码=====
  {{ former_attempt.implementation.all_codes }}
  =====尝试 {{ loop.index }} 的反馈=====
  {{ former_attempt.feedback }}
  {% endfor %}
  {% endif %}
  {% endfor %}

evaluator_output_format_system: |-
  用户正在尝试在以下场景中实现一些因子：
  {{ scenario }}
  用户将向你提供输出格式。请帮助检查输出是否与该格式一致。
  请以JSON格式回复。这是JSON输出的示例结构：
  {
      "output_format_decision": True,
      "output_format_feedback": "输出格式正确."
  }


evaluator_final_decision_v1_system: |-
  用户正在尝试在以下场景中实现一些因子：
  {{ scenario }}
  用户已完成评估并收到了评估者的反馈。
  评估者运行代码并获取因子值数据框，并提供有关用户代码和代码输出的几条反馈。你应分析这些反馈，并结合场景和因子描述，对评估结果做出最终决定。最终决定包括因子是否正确实现，如果没有，则包含详细的反馈、原因和建议。

  实现最终决定的逻辑如下：
  1. 如果值与正确值在小范围内完全相同，则认为实现是正确的。
  2. 如果值与正确值在ic或rank ic上具有高度相关性，则认为实现是正确的。
  3. 如果未提供正确值，则认为实现是正确的，前提是代码成功执行（假设提供的数据是正确的）。任何异常，包括主动引发的异常，都被视为代码的错误。此外，代码反馈必须与场景和因子描述一致。如果代码执行失败，则无法认为实现是正确的，无论原因是什么。

  请以json格式回复批评。这是JSON输出的示例结构，请严格遵循以下格式：
  {
      "final_decision": True,
      "final_feedback": "最终反馈信息",
  }

evaluator_final_decision_v1_user: |-
  --------------因子信息---------------
  {{ factor_information }}
  --------------执行反馈---------------
  {{ execution_feedback }}
  --------------代码反馈---------------
  {{ code_feedback }}
  --------------因子值反馈---------------
  {{ value_feedback }}

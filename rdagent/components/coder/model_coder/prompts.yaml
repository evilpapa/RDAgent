extract_model_formulation_system: |-
    提供本文中提出模型的描述，写出包含变量的 LaTeX 公式以及模型的架构。格式如下：
    {
        "model_name (模型名称)": {
            "description": "模型的详细描述",
            "formulation": "表示模型公式的 LaTeX 公式",
            "architecture": "模型架构的详细描述，例如神经网络层或树结构",
            "variables": {
                "\hat{y}_u": "节点 u 的预测输出",
                "variable_name_2": "变量 2 的描述",
                "variable_name_3": "变量 3 的描述"
            },
            "hyperparameters": {
                "hyperparameter_name_1": "超参数 1 的值",
                "hyperparameter_name_2": "超参数 2 的值",
                "hyperparameter_name_3": "超参数 3 的值"
            },
            "training_hyperparameters": {  # 所有值仅供参考；您可以自行设置
                "n_epochs": "100",
                "lr": "1e-3",
                "early_stop": 10,
                "batch_size": 256,
                "weight_decay": 1e-4,
            },
            "model_type": "Tabular 或 TimeSeries 或 Graph 或 XGBoost"  # 应为 "Tabular"、"TimeSeries"、"Graph" 或 "XGBoost" 之一
        }
    }
    此格式内容应以 ```json 开始并以 ``` 结束，内容应为 JSON 格式。

evolving_strategy_model_coder:
    system: |-
        用户尝试在以下场景中实现一些 PyTorch 模型：
        {{ scenario }}
        您的代码需要与场景保持一致，这意味着用户需要根据输入数据获得模型的预测结果。

        为帮助您编写正确的代码，用户可能会提供多种信息来帮助您：
        1. 用户可能会提供类似模型的正确代码。您应从这些代码中学习以编写正确代码。
        2. 用户可能会提供失败的代码及其对应的反馈。反馈包括执行结果、代码和模型输出值。您应分析反馈并尝试纠正最新代码。
        3. 用户可能会提供对最新失败代码的建议以及一些类似的失败与修正对。每对包含失败代码及其对应的修正版本代码。您应从这些建议中学习以编写正确代码。

        您必须基于以下最新尝试编写代码，其中包括用户的前代码和代码反馈。您应仔细阅读前尝试内容，并且不得修改前代码的正确部分。

        {% if current_code is not none %}
        用户之前已编写了一些代码。您应基于此代码编写新代码。以下是最新代码：
        ```python
        {{ current_code }}
        ```
        您的代码应与前代码非常相似，这意味着您的代码应与前代码有九成以上的相似度！您不应修改代码的正确部分。
        {% else %}
        用户之前未编写任何代码。您应从头开始编写新代码。
        {% endif %}

        {% if queried_former_failed_knowledge|length != 0 %}
        --------------您的最新尝试：---------------
        =====前实现代码=====
        {{ queried_former_failed_knowledge[-1].implementation.all_codes }}
        =====前实现反馈=====
        {{ queried_former_failed_knowledge[-1].feedback }}
        {% endif %}
        
        请以以下 JSON 格式响应代码。以下是 JSON 输出的示例结构：
        {
            "code": "Python 代码作为字符串。"
        }

    user: |-
        --------------目标模型信息：---------------
        {{ model_information_str }}

        {% if queried_similar_successful_knowledge|length != 0 %}
        --------------类似模型的正确代码：---------------
        {% for similar_successful_knowledge in queried_similar_successful_knowledge %}
        =====模型 {{loop.index}}：=====
        {{ similar_successful_knowledge.target_task.get_task_information() }}
        =====代码：=====
        {{ similar_successful_knowledge.implementation.all_codes }}
        {% endfor %}
        {% endif %}

        {% if queried_former_failed_knowledge|length != 0 %}
        --------------之前失败的代码：---------------
        {% for former_failed_knowledge in queried_former_failed_knowledge %}
        =====实现代码 {{ loop.index }}=====
        {{ former_failed_knowledge.implementation.all_codes }}
        =====实现反馈 {{ loop.index }}=====
        {{ former_failed_knowledge.feedback }}
        {% endfor %}
        {% endif %}

evaluator_code_feedback:
    system: |-
        用户尝试在以下场景中实现一些模型：
        {{ scenario }}
        用户将提供模型信息。

        您的任务是检查用户的代码是否与模型信息和场景一致。
        用户将提供源 Python 代码以及执行失败时的错误信息。
        用户可能会提供正确代码供您进行批评。您不应以任何形式泄露正确代码给用户，但可以使用它提供批评。

        用户还比较了用户代码生成的输出与正确代码生成的输出。用户将提供一些分析结果，比较两个输出。您可能会发现代码中导致两个输出差异的错误。

        如果提供了正确代码，您的批评应仅考虑检查用户代码是否与正确代码一致，因为正确代码绝对正确。
        如果未提供正确代码，您的批评应考虑检查用户代码是否合理且与描述和场景一致。

        注意，您的批评不是为了让用户调试代码。它们是发送给编码代理以纠正代码的。因此不要给用户检查的建议，例如“请检查代码行 XXX”。

        您的建议不应包含任何代码，仅需提供一些清晰简短的建议。请指出响应中的关键问题，忽略不重要的问题以避免混淆。如果代码中未发现重大问题，您可以响应“未发现批评”。

        您应为每个批评提供建议以帮助用户改进代码。请以以下格式响应批评。以下是输出的示例结构：
        批评 1：批评 1 的信息
        批评 2：批评 2 的信息
    
    user: |-
        --------------模型信息：---------------
        {{ model_information }}
        --------------Python 代码：---------------
        {{ code }}
        --------------执行反馈：---------------
        {{ model_execution_feedback }}
        {% if model_value_feedback is not none %}
        --------------模型值反馈：---------------
        {{ model_value_feedback }}
        {% endif %}
        {% if gt_code is not none %}
        --------------正确的 Python 代码：---------------
        {{ gt_code }}
        {% endif %}

evaluator_final_feedback:
    system: |-
        用户尝试在以下场景中实现一个模型：
        {{ scenario }}
        用户已完成评估并从评估者处获得了一些反馈。
        评估者运行代码并获得输出，并提供了关于用户代码和代码输出的多个反馈。您应分析反馈并考虑场景和模型描述以给出关于评估结果的最终决定。最终决定包括模型是否正确实现，如果不正确，则详细反馈包含原因和建议，若最终决定为 False。

        实现最终决定的逻辑如下：
        1. 如果值与正确值在小容差范围内完全相同，则实现被认为是正确的。
        2. 如果未提供正确值，则实现被认为是正确的，前提是代码执行成功且代码反馈与场景和模型描述一致。

        请以 JSON 格式响应批评。以下是 JSON 输出的示例结构，请严格遵循格式：
        {
            "final_decision": True,
            "final_feedback": "最终反馈信息",
        }
    user: |-
        --------------模型信息：---------------
        {{ model_information }}
        --------------模型执行反馈：---------------
        {{ model_execution_feedback }}
        --------------模型形状反馈：---------------
        {{ model_shape_feedback }}
        --------------模型代码反馈：---------------
        {{ model_code_feedback }}
        --------------模型值反馈：---------------
        {{ model_value_feedback }}
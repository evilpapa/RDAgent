general_model_background: |-
  通用模型是一个灵活且全面的框架，旨在将基于因子、基于模型和基于图的量化投资方法整合在一起。它允许用户定义自定义模型，利用各种金融因子预测投资组合或单一资产的收益和风险。这些模型是许多高级量化投资策略的核心，可以适应广泛的使用场景，从基于因子的阿尔法生成到复杂的深度学习预测。

  每个通用模型包含以下组件：
  1. 名称：模型的名称。
  2. 描述：模型的详细描述。
  3. 因子：作为输入的金融因子，包括其定义和公式。
  4. 架构：机器学习、深度学习或基于图的模型结构。
  5. 超参数：模型中使用的超参数，例如学习率、训练轮数等。
  6. 模型类型：模型的类型，“Tabular”表示表格数据，“TimeSeries”表示时间序列数据，“Graph”表示图数据。
  通用模型应提供其因子、架构和超参数的清晰详细文档。每个模型应具有固定的架构和超参数，以确保可重复性和一致性。

general_model_interface: |-
  您的 Python 代码应遵循接口以更好地与用户的系统交互。它应是一个 PyTorch 模型。
  您的代码应包含以下部分：
  1. 导入部分：导入必要的库。
  2. 一个类，该类是 pytorch.nn.Module 的子类。此类应具有一个 init 函数和一个 forward 函数，该函数输入一个张量并输出一个张量。
  3. 设置一个名为 "model_cls" 的变量为您定义的类。

  用户将您的代码保存到名为 "model.py" 的 Python 文件中。然后用户在将 cwd 设置到目录后，在文件 "model.py" 中导入 model_cls：
  ```python
  from model import model_cls

  因此您的 Python 代码应遵循以下模式：

  class XXXModel(torch.nn.Module):
    ...
  model_cls = XXXModel

  模型有三种类型，“Tabular”表示表格数据，“TimeSeries”表示时间序列数据，“Graph”表示图数据。

  表格模型的输入形状为 (batch_size, num_features)。
  时间序列模型的输入形状为 (batch_size, num_features, num_timesteps)。
  图模型的输入为两个张量。
  node_feature：形状为 (batch_size, num_features) 的张量。
  edge_index：形状为 (2, num_edges) 的张量。
  
  batch_size 是一个动态值，由 forward 函数的输入决定。
  
  模型的输出形状应为 (batch_size, 1)。

  "num_features" 和 "num_timesteps" 是静态的，将通过 init 函数提供给模型。

  用户将使用以下代码初始化表格模型：

  model = model_cls(num_features=num_features)

  用户将使用以下代码初始化时间序列模型：

  model = model_cls(num_features=num_features, num_timesteps=num_timesteps)

  用户将使用以下代码初始化图模型：

  model = model_cls(num_features=num_features)


  不会向模型传递其他参数，因此请为其他参数设置默认值或使其静态。

  处理时间序列模型时，请记住对输入张量进行置换，因为输入张量的形状为 (batch_size, num_features, num_timesteps)，而普通时间序列模型期望输入张量的形状为 (batch_size, num_timesteps, num_features)。

  不要在您的 Python 代码中编写任何 try-except 块。用户将捕获异常消息并向您提供反馈。此外，不要在您的 Python 代码中编写 main 函数。用户将调用 model_cls 的 forward 方法以获取输出张量。

  请注意，您的模型应仅使用当前特征作为输入。用户将向模型的 forward 函数提供输入张量。

general_model_output_format: |-
  您的输出应为形状为 (batch_size, 1) 的张量。
  输出张量应保存在与您的 Python 文件相同目录下名为 "output.pth" 的文件中。
  用户将评估输出张量的形状，因此从 "output.pth" 读取的张量应为 8 个数字。

general_model_simulator: |-
  模型未加载和回测。因此，请注意其架构。

general_model_rich_style_description: |-
  ### [模型研究与开发助手](#_scenario)

  #### [概述](#_summary)

  此演示自动从学术论文中提取和开发 PyTorch 模型。它通过两个主要组件支持各种模型类型：Reader 和 Coder。

  #### [工作流组件](#_rdloops)

  1. **[Reader](#_research)**
      - 从论文中提取模型信息，包括架构和参数。
      - 使用大型语言模型将内容转换为结构化格式。

  2. **[Evolving Coder](#_development)**
      - 将结构化信息转换为可执行的 PyTorch 代码。
      - 通过不断发展的编码机制确保正确的张量形状。
      - 优化代码以匹配源规范。
